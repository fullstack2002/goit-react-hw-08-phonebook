{"version":3,"file":"static/js/850.d8ccadd1.chunk.js","mappings":"gOA6EA,UAtEqB,WACnB,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MAEd,OAAQT,GACN,IAAK,WACHC,EAAQQ,GACR,MACF,IAAK,YACHN,EAASM,GACT,MACF,IAAK,eACHJ,EAAYI,GACZ,MACF,QACER,EAAQ,IACRE,EAAS,IACTE,EAAY,IAEjB,EAEKK,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAQFG,GAASC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACjCC,GAAUF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCE,GAAaH,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAE3C,OAAQ,kBAAMG,SAVO,SAACb,GACpBA,EAAEc,iBAEFX,GAASY,EAAAA,EAAAA,IAAa,CAAEtB,KAAMA,EAAME,MAAOA,EAAOE,SAAUA,IAC7D,EAMO,WACF,kBAAOmB,QAASR,EAAhB,mBACA,kBACIS,GAAIT,EACJU,KAAK,OACLzB,KAAK,WACLS,MAAOT,EACP0B,SAAUpB,EACVqB,UAAQ,EACRC,YAAY,eAChB,kBAAOL,QAASL,EAAhB,oBACA,kBACIM,GAAIN,EACJO,KAAK,QACLzB,KAAK,YACLS,MAAOP,EACPwB,SAAUpB,EACVqB,UAAQ,EACRC,YAAY,wBAChB,kBAAOL,QAASJ,EAAhB,uBACA,kBACIK,GAAIL,EACJM,KAAK,WACLzB,KAAK,eACLS,MAAOL,EACPsB,SAAUpB,EACVqB,UAAQ,EACRC,YAAY,uBACdhB,GAAqD,SAAC,IAAD,KAAzC,mBAAQa,KAAK,SAAb,uBAErB,C,wDC1EM,IAkBIR,EAAS,eAACY,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Phonebook/RegisterForm/RegisterForm.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { nanoid } from 'nanoid';\r\nimport { getAuth } from 'redux/auth/authSlice';\r\nimport { registerUser } from 'redux/auth/authOperations';\r\nimport { Loader } from 'components/Phonebook/Loader/Loader';\r\n\r\nconst RegisterForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n        \r\n    switch (name) {\r\n      case 'userName':\r\n        setName(value)\r\n        break;\r\n      case 'userEmail':\r\n        setEmail(value)\r\n        break;\r\n      case 'userPassword':\r\n        setPassword(value)\r\n        break;\r\n      default:\r\n        setName('')\r\n        setEmail('')\r\n        setPassword('')\r\n    }\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const { isLoading } = useSelector(getAuth);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch(registerUser({ name: name, email: email, password: password }));\r\n  }\r\n\r\n  const nameId = useMemo(() => nanoid(), []);\r\n  const emailId = useMemo(() => nanoid(), []);\r\n  const passwordId = useMemo(() => nanoid(), []);\r\n\r\n  return (<form onSubmit={handleSubmit}>\r\n        <label htmlFor={nameId}>Name</label>\r\n        <input\r\n            id={nameId}\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            value={name}\r\n            onChange={handleChange}\r\n            required\r\n            placeholder='User_Name'/>\r\n        <label htmlFor={emailId}>Email</label>\r\n        <input\r\n            id={emailId}\r\n            type=\"email\"\r\n            name=\"userEmail\"\r\n            value={email}\r\n            onChange={handleChange}\r\n            required\r\n            placeholder='youremail@mail.com'/>\r\n        <label htmlFor={passwordId}>Password</label>\r\n        <input\r\n            id={passwordId}\r\n            type=\"password\"\r\n            name=\"userPassword\"\r\n            value={password}\r\n            onChange={handleChange}\r\n            required\r\n            placeholder='7 symbols required'/>\r\n        {!isLoading ? <button type='submit'>Sign Up</button> : <Loader />}\r\n    </form>)\r\n};\r\n\r\nexport default RegisterForm;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","name","setName","email","setEmail","password","setPassword","handleChange","e","target","value","dispatch","useDispatch","isLoading","useSelector","getAuth","nameId","useMemo","nanoid","emailId","passwordId","onSubmit","preventDefault","registerUser","htmlFor","id","type","onChange","required","placeholder","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}