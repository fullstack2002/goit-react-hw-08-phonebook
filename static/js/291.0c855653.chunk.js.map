{"version":3,"file":"static/js/291.0c855653.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","App.styled.jsx","components/Phonebook/Phonebook.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled'\nexport const PhoneForm = styled.form`\n  padding: 20px;\n\tborder: 1px solid lightgrey;\n\ttext-align: left;\n`;\nexport const PhoneField = styled.label`\n  display: block;\n\tmargin: 10px;\n`;\nexport const PhoneInput = styled.input`\n  width: 200px;\n`;\nexport const PhoneButton = styled.button`\n  width: 120px;\n\tmargin-left: 10px;\n\tbackground-color: #77bbd4;\n\tborder: 1px solid grey;\n\tborder-radius: 2px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  \n  &:hover {\n\tbackground-color: #4d7d8e;\n}\n`;","import { useState } from \"react\";\nimport { addContact } from \"redux/contacts/operations\";\nimport { getContacts } from '../../redux/contacts/contactsSlice';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Loader } from \"components/Loader/Loader\";\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { PhoneForm, PhoneField, PhoneInput, PhoneButton } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n   const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        \n        switch (name) {\n            case 'contactName':\n                setName(value)\n                break;\n            case 'contactNumber':\n                setNumber(value)\n                break;\n            default:\n                setName('')\n                setNumber('')\n        }\n  }\n  \n  const dispatch = useDispatch();\n    const {items, addingLoader} = useSelector(getContacts);\n\n    const contactAlreadyExists = (name, number) => {\n        return items.find((item) => item.name.toLocaleLowerCase() === name.toLocaleLowerCase() || item.number === number);\n  }\n  \n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (contactAlreadyExists(name, number)) {\n            return toast.error(`${name} ${number} is already in Phonebook`)\n        }\n\n        dispatch(addContact({name, number}));\n\n        setName('')\n        setNumber('')\n    }\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n  \n  return (\n      <PhoneForm onSubmit={handleSubmit}>\n      <PhoneField htmlFor={nameId}>Name</PhoneField>\n      <PhoneInput\n          id={nameId}\n          type=\"text\"\n          name=\"contactName\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder='Input name'  \n          required />\n      <PhoneField htmlFor={numberId}>Number</PhoneField>\n      <PhoneInput\n          id={numberId}\n          type=\"tel\"\n          name=\"contactNumber\"\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder='Input name'  \n          required />\n        {addingLoader ?\n            <Loader /> :\n            <PhoneButton type='submit'>Add contact</PhoneButton>\n        }\n    </PhoneForm>\n  );\n};","import styled from '@emotion/styled';\nexport const ContactListButton = styled.button`\n\tbackground-color: #77bbd4;\n\tborder: 1px solid gray;\n\tborder-radius: 2px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #4d7d8e;\n  }\n`;\nexport const ContactListElement = styled.li`\n  font-size: 16px;\n\tline-height: 32px;\n  list-style: none;\n`;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactListElement, ContactListButton } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ data }) => {\n  const dispatch = useDispatch();\n\n  const { id, name, number } = data;\n\n  const onDeleteClick = (e, id) => {\n    if (id === e.target.id) {\n      e.target.textContent = 'Deleting...';\n      e.target.setAttribute('disabled', 'true');\n    }\n\n    dispatch(deleteContact(id))\n  }\n  return <ContactListElement>\n        <p>{name}: {number}</p>\n            <ContactListButton type='button' id={id} onClick={(e) => onDeleteClick(e, id)}>Delete\n            </ContactListButton>\n    </ContactListElement>\n};\n\nContactListItem.propTypes = {\n    data: PropTypes.objectOf(PropTypes.string.isRequired,),\n}","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { getFilter } from 'redux/filter/filterSlice';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    const { items, error, isLoading } = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n\n   const getFilteredContacts = () => {\n        if (!filter) {\n            return items;\n        }\n        \n        return items.filter(({name}) => name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()))\n    }\n\n    const contactsToRender = getFilteredContacts()\n    \n    return (\n        <ul>\n          {isLoading ? <div>Loading...</div> : \n        contactsToRender.map(item =>\n            <ContactListItem key={item.id} data={item} />)}\n        {error && <div>Something went wrong...</div>}\n        </ul>\n    );\n};\n\nexport default ContactList;","import styled from '@emotion/styled';\nexport const FilterTitle = styled.label`\n  margin-left: 30px;\n`;\nexport const FilterInput = styled.input`\n  width: 200px;\n\tmargin-left: 30px;\n`;","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { FilterTitle, FilterInput } from \"./Filter.styled\";\n\n  export const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(state => state.filter);\n  \n  const handleChange = (e) => {\n    dispatch(setFilter(e.target.value));\n  }\n  \n  const filterId = nanoid();\n  \n    return (\n    <div>\n      <FilterTitle htmlFor={filterId}>Find contacts by name</FilterTitle>\n        <FilterInput\n        id={filterId}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n        title=\"Search field\"\n        required\n        />\n    </div>\n  );\n};","import styled from '@emotion/styled'\nexport const Container = styled.div`\n  width: 700px;\n\tmargin: 10px auto;\n\tborder: 1px solid lightgrey;\n\tbox-shadow: 2px 2px 2px lightgrey;\n\tpadding: 20px;\n\tborder-radius: 5px;\n\ttext-align: left;\n`;","import { ContactForm } from '../ContactForm/ContactForm';\nimport { ContactList } from '../ContactList/ContactList';\nimport { Filter } from '../Filter/Filter';\nimport { Container } from 'App.styled';\n\nconst Phonebook = () => {\n  return <>\n  <Container>\n    <h1>Phonebook</h1>\n    <ContactForm />\n    <h2>Contacts</h2>\n    <Filter />\n    <ContactList />\n    </Container>\n  </>\n};\n\nexport default Phonebook;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["PhoneForm","styled","PhoneField","PhoneInput","PhoneButton","ContactForm","useState","name","setName","number","setNumber","handleChange","e","target","value","dispatch","useDispatch","useSelector","getContacts","items","addingLoader","nameId","nanoid","numberId","onSubmit","preventDefault","find","item","toLocaleLowerCase","contactAlreadyExists","toast","addContact","htmlFor","id","type","onChange","pattern","title","placeholder","required","Loader","ContactListButton","ContactListElement","ContactListItem","data","onClick","textContent","setAttribute","deleteContact","onDeleteClick","ContactList","useEffect","fetchContacts","error","isLoading","filter","getFilter","contactsToRender","includes","map","FilterTitle","FilterInput","Filter","state","filterId","setFilter","Container","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}