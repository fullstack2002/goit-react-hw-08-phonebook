{"version":3,"file":"static/js/867.4141a196.chunk.js","mappings":"4SACaA,EAAYC,EAAAA,EAAAA,KAAH,+FAKTC,EAAaD,EAAAA,EAAAA,MAAH,4DAIVE,EAAaF,EAAAA,EAAAA,MAAH,yCAGVG,EAAcH,EAAAA,EAAAA,OAAH,qQ,SCJXI,EAAc,WACxB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACC,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAe,SAACC,GAClB,MAAwBA,EAAEC,OAAlBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MAEd,OAAQP,GACJ,IAAK,cACDC,EAAQM,GACR,MACJ,IAAK,gBACDJ,EAAUI,GACV,MACJ,QACIN,EAAQ,IACRE,EAAU,IAEvB,EAEKK,GAAWC,EAAAA,EAAAA,MACf,GAA8BC,EAAAA,EAAAA,IAAYC,EAAAA,GAAnCC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,aAmBVC,GAASC,EAAAA,EAAAA,MACTC,GAAWD,EAAAA,EAAAA,MAEjB,OACI,UAACtB,EAAD,CAAWwB,SAjBQ,SAACZ,GAGlB,GAFAA,EAAEa,iBALuB,SAAClB,EAAME,GAChC,OAAOU,EAAMO,MAAK,SAACC,GAAD,OAAUA,EAAKpB,KAAKqB,sBAAwBrB,EAAKqB,qBAAuBD,EAAKlB,SAAWA,CAAxF,GACvB,CAKSoB,CAAqBtB,EAAME,GAC3B,OAAOqB,EAAAA,GAAAA,MAAA,UAAevB,EAAf,YAAuBE,EAAvB,6BAGXM,GAASgB,EAAAA,EAAAA,IAAW,CAACxB,KAAAA,EAAME,OAAAA,KAE3BD,EAAQ,IACRE,EAAU,GACb,EAMC,WACA,SAACR,EAAD,CAAY8B,QAASX,EAArB,mBACA,SAAClB,EAAD,CACI8B,GAAIZ,EACJa,KAAK,OACL3B,KAAK,cACLO,MAAOP,EACP4B,SAAUxB,EACVyB,QAAQ,yHACRC,MAAM,yIACNC,YAAY,aACZC,UAAQ,KACZ,SAACrC,EAAD,CAAY8B,QAAST,EAArB,qBACA,SAACpB,EAAD,CACI8B,GAAIV,EACJW,KAAK,MACL3B,KAAK,gBACL4B,SAAUxB,EACVyB,QAAQ,yFACRC,MAAM,+FACNC,YAAY,aACZC,UAAQ,IACTnB,GACG,SAACoB,EAAA,EAAD,KACA,SAACpC,EAAD,CAAa8B,KAAK,SAAlB,2BAIX,EChFYO,EAAoBxC,EAAAA,EAAAA,OAAH,8NASjByC,EAAqBzC,EAAAA,EAAAA,GAAH,uFCJlB0C,EAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1B7B,GAAWC,EAAAA,EAAAA,MAETiB,EAAqBW,EAArBX,GAAI1B,EAAiBqC,EAAjBrC,KAAME,EAAWmC,EAAXnC,OAUlB,OAAO,UAACiC,EAAD,YACD,yBAAInC,EAAJ,KAAYE,MACR,SAACgC,EAAD,CAAmBP,KAAK,SAASD,GAAIA,EAAIY,QAAS,SAACjC,GAAD,OAVtC,SAACA,EAAGqB,GACpBA,IAAOrB,EAAEC,OAAOoB,KAClBrB,EAAEC,OAAOiC,YAAc,cACvBlC,EAAEC,OAAOkC,aAAa,WAAY,SAGpChC,GAASiC,EAAAA,EAAAA,IAAcf,GACxB,CAGkEgB,CAAcrC,EAAGqB,EAAxB,EAAlD,sBAGX,E,UCjBYiB,EAAc,WACzB,IAAMnC,GAAWC,EAAAA,EAAAA,OAEjBmC,EAAAA,EAAAA,YAAU,WACJpC,GAASqC,EAAAA,EAAAA,MACZ,GAAE,CAACrC,IAEJ,OAAoCE,EAAAA,EAAAA,IAAYC,EAAAA,GAAxCC,EAAR,EAAQA,MAAOkC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,UAChBC,GAAStC,EAAAA,EAAAA,IAAYuC,EAAAA,IAUrBC,EAPGF,EAIEpC,EAAMoC,QAAO,qBAAEhD,KAAeqB,oBAAoB8B,SAASH,EAAO3B,oBAArD,IAHTT,EAQf,OACI,0BACGmC,GAAY,wCACfG,EAAiBE,KAAI,SAAAhC,GAAI,OACrB,SAACgB,EAAD,CAA+BC,KAAMjB,GAAfA,EAAKM,GADN,IAExBoB,IAAS,uDAGjB,EClCYO,EAAc3D,EAAAA,EAAAA,MAAH,8CAGX4D,EAAc5D,EAAAA,EAAAA,MAAH,+DCCT6D,EAAS,WACtB,IAAM/C,GAAWC,EAAAA,EAAAA,MAEXuC,GAAStC,EAAAA,EAAAA,KAAY,SAAA8C,GAAK,OAAIA,EAAMR,MAAV,IAM1BS,GAAW1C,EAAAA,EAAAA,MAEf,OACA,4BACE,SAACsC,EAAD,CAAa5B,QAASgC,EAAtB,oCACE,SAACH,EAAD,CACA5B,GAAI+B,EACJ9B,KAAK,OACL3B,KAAK,SACLO,MAAOyC,EACPpB,SAde,SAACvB,GACpBG,GAASkD,EAAAA,EAAAA,IAAUrD,EAAEC,OAAOC,OAC7B,EAaKuB,MAAM,eACNE,UAAQ,MAIf,EC7BY2B,EAAYjE,EAAAA,EAAAA,IAAH,mMCgBtB,EAZkB,WAChB,OAAO,+BACP,UAACiE,EAAD,YACE,uCACA,SAAC7D,EAAD,KACA,sCACA,SAACyD,EAAD,KACA,SAACZ,EAAD,QAGH,C,wDCdM,IAkBI5B,EAAS,eAAC6C,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACtC,EAAIuC,GAWvD,OAREvC,IAFFuC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Phonebook/ContactForm/ContactForm.styled.jsx","components/Phonebook/ContactForm/ContactForm.jsx","components/Phonebook/ContactListItem/ContactListItem.styled.jsx","components/Phonebook/ContactListItem/ContactListItem.jsx","components/Phonebook/ContactList/ContactList.jsx","components/Phonebook/Filter/Filter.styled.jsx","components/Phonebook/Filter/Filter.jsx","components/App.styled.jsx","components/Phonebook/Phonebook.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled'\r\nexport const PhoneForm = styled.form`\r\n  padding: 20px;\r\n\tborder: 1px solid lightgrey;\r\n\ttext-align: left;\r\n`;\r\nexport const PhoneField = styled.label`\r\n  display: block;\r\n\tmargin: 10px;\r\n`;\r\nexport const PhoneInput = styled.input`\r\n  width: 200px;\r\n`;\r\nexport const PhoneButton = styled.button`\r\n  width: 120px;\r\n\tmargin-left: 10px;\r\n\tbackground-color: #77bbd4;\r\n\tborder: 1px solid grey;\r\n\tborder-radius: 2px;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  \r\n  &:hover {\r\n\tbackground-color: #4d7d8e;\r\n}\r\n`;","import { useState } from \"react\";\r\nimport { addContact } from \"redux/contacts/operations\";\r\nimport { getContacts } from '../../../redux/contacts/contactsSlice';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Loader } from \"components/Phonebook/Loader/Loader\";\r\nimport { nanoid } from 'nanoid';\r\nimport { toast } from 'react-toastify';\r\nimport { PhoneForm, PhoneField, PhoneInput, PhoneButton } from './ContactForm.styled';\r\n\r\nexport const ContactForm = () => {\r\n   const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        \r\n        switch (name) {\r\n            case 'contactName':\r\n                setName(value)\r\n                break;\r\n            case 'contactNumber':\r\n                setNumber(value)\r\n                break;\r\n            default:\r\n                setName('')\r\n                setNumber('')\r\n        }\r\n  }\r\n  \r\n  const dispatch = useDispatch();\r\n    const {items, addingLoader} = useSelector(getContacts);\r\n\r\n    const contactAlreadyExists = (name, number) => {\r\n        return items.find((item) => item.name.toLocaleLowerCase() === name.toLocaleLowerCase() || item.number === number);\r\n  }\r\n  \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (contactAlreadyExists(name, number)) {\r\n            return toast.error(`${name} ${number} is already in Phonebook`)\r\n        }\r\n\r\n        dispatch(addContact({name, number}));\r\n\r\n        setName('')\r\n        setNumber('')\r\n    }\r\n\r\n  const nameId = nanoid();\r\n  const numberId = nanoid();\r\n  \r\n  return (\r\n      <PhoneForm onSubmit={handleSubmit}>\r\n      <PhoneField htmlFor={nameId}>Name</PhoneField>\r\n      <PhoneInput\r\n          id={nameId}\r\n          type=\"text\"\r\n          name=\"contactName\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          placeholder='Input name'  \r\n          required />\r\n      <PhoneField htmlFor={numberId}>Number</PhoneField>\r\n      <PhoneInput\r\n          id={numberId}\r\n          type=\"tel\"\r\n          name=\"contactNumber\"\r\n          onChange={handleChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          placeholder='Input name'  \r\n          required />\r\n        {addingLoader ?\r\n            <Loader /> :\r\n            <PhoneButton type='submit'>Add contact</PhoneButton>\r\n        }\r\n    </PhoneForm>\r\n  );\r\n};","import styled from '@emotion/styled';\r\nexport const ContactListButton = styled.button`\r\n\tbackground-color: #77bbd4;\r\n\tborder: 1px solid gray;\r\n\tborder-radius: 2px;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  &:hover {\r\n    background-color: #4d7d8e;\r\n  }\r\n`;\r\nexport const ContactListElement = styled.li`\r\n  font-size: 16px;\r\n\tline-height: 32px;\r\n  list-style: none;\r\n`;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContact } from 'redux/contacts/operations';\r\nimport { ContactListElement, ContactListButton } from './ContactListItem.styled';\r\n\r\nexport const ContactListItem = ({ data }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { id, name, number } = data;\r\n\r\n  const onDeleteClick = (e, id) => {\r\n    if (id === e.target.id) {\r\n      e.target.textContent = 'Deleting...';\r\n      e.target.setAttribute('disabled', 'true');\r\n    }\r\n\r\n    dispatch(deleteContact(id))\r\n  }\r\n  return <ContactListElement>\r\n        <p>{name}: {number}</p>\r\n            <ContactListButton type='button' id={id} onClick={(e) => onDeleteClick(e, id)}>Delete\r\n            </ContactListButton>\r\n    </ContactListElement>\r\n};\r\n\r\nContactListItem.propTypes = {\r\n    data: PropTypes.objectOf(PropTypes.string.isRequired,),\r\n}","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\r\nimport { fetchContacts } from 'redux/contacts/operations';\r\nimport { getContacts } from 'redux/contacts/contactsSlice';\r\nimport { getFilter } from 'redux/filter/filterSlice';\r\n\r\nexport const ContactList = () => {\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n        dispatch(fetchContacts());\r\n    }, [dispatch]);\r\n\r\n    const { items, error, isLoading } = useSelector(getContacts);\r\n    const filter = useSelector(getFilter);\r\n\r\n   const getFilteredContacts = () => {\r\n        if (!filter) {\r\n            return items;\r\n        }\r\n        \r\n        return items.filter(({name}) => name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()))\r\n    }\r\n\r\n    const contactsToRender = getFilteredContacts()\r\n    \r\n    return (\r\n        <ul>\r\n          {isLoading ? <div>Loading...</div> : \r\n        contactsToRender.map(item =>\r\n            <ContactListItem key={item.id} data={item} />)}\r\n        {error && <div>Something went wrong...</div>}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ContactList;","import styled from '@emotion/styled';\r\nexport const FilterTitle = styled.label`\r\n  margin-left: 30px;\r\n`;\r\nexport const FilterInput = styled.input`\r\n  width: 200px;\r\n\tmargin-left: 30px;\r\n`;","import { nanoid } from 'nanoid';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setFilter } from '../../../redux/filter/filterSlice';\r\nimport { FilterTitle, FilterInput } from \"./Filter.styled\";\r\n\r\n  export const Filter = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const filter = useSelector(state => state.filter);\r\n  \r\n  const handleChange = (e) => {\r\n    dispatch(setFilter(e.target.value));\r\n  }\r\n  \r\n  const filterId = nanoid();\r\n  \r\n    return (\r\n    <div>\r\n      <FilterTitle htmlFor={filterId}>Find contacts by name</FilterTitle>\r\n        <FilterInput\r\n        id={filterId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={handleChange}\r\n        title=\"Search field\"\r\n        required\r\n        />\r\n    </div>\r\n  );\r\n};","import styled from '@emotion/styled'\r\nexport const Container = styled.div`\r\n  width: 700px;\r\n\tmargin: 10px auto;\r\n\tborder: 1px solid lightgrey;\r\n\tbox-shadow: 2px 2px 2px lightgrey;\r\n\tpadding: 20px;\r\n\tborder-radius: 5px;\r\n\ttext-align: left;\r\n`;","import { ContactForm } from './ContactForm/ContactForm';\r\nimport { ContactList } from './ContactList/ContactList';\r\nimport { Filter } from './Filter/Filter';\r\nimport { Container } from '../App.styled';\r\n\r\nconst Phonebook = () => {\r\n  return <>\r\n  <Container>\r\n    <h1>Phonebook</h1>\r\n    <ContactForm />\r\n    <h2>Contacts</h2>\r\n    <Filter />\r\n    <ContactList />\r\n    </Container>\r\n  </>\r\n};\r\n\r\nexport default Phonebook;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["PhoneForm","styled","PhoneField","PhoneInput","PhoneButton","ContactForm","useState","name","setName","number","setNumber","handleChange","e","target","value","dispatch","useDispatch","useSelector","getContacts","items","addingLoader","nameId","nanoid","numberId","onSubmit","preventDefault","find","item","toLocaleLowerCase","contactAlreadyExists","toast","addContact","htmlFor","id","type","onChange","pattern","title","placeholder","required","Loader","ContactListButton","ContactListElement","ContactListItem","data","onClick","textContent","setAttribute","deleteContact","onDeleteClick","ContactList","useEffect","fetchContacts","error","isLoading","filter","getFilter","contactsToRender","includes","map","FilterTitle","FilterInput","Filter","state","filterId","setFilter","Container","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}