{"version":3,"file":"static/js/351.2c3bad4c.chunk.js","mappings":"gOA+DA,UAxDkB,WAChB,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,YACHN,EAASO,GACT,MACF,IAAK,eACHL,EAAYK,GACZ,MACF,QACEP,EAAS,IACTE,EAAY,IAEjB,EAEKM,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAQFG,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAE3C,OAAQ,kBAAME,SATO,SAACb,GACpBA,EAAEc,iBAEFV,GAASW,EAAAA,EAAAA,IAAU,CAAEpB,MAAOA,EAAOE,SAAUA,IAC9C,EAKO,WACF,kBAAOmB,QAASP,EAAhB,oBACA,kBACIQ,GAAIR,EACJS,KAAK,QACLhB,KAAK,YACLC,MAAOR,EACPwB,SAAUpB,EACVqB,UAAQ,EACRC,YAAY,WAChB,kBAAOL,QAASJ,EAAhB,uBACA,kBACIK,GAAIL,EACJM,KAAK,WACLhB,KAAK,eACLC,MAAON,EACPsB,SAAUpB,EACVqB,UAAQ,EACRC,YAAY,aACdf,GAAoD,SAAC,IAAD,KAAxC,mBAAQY,KAAK,SAAb,sBAGrB,C,wDC5DM,IAkBIP,EAAS,eAACW,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Phonebook/LoginForm/LoginForm.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { nanoid } from 'nanoid';\r\nimport { Loader } from 'components/Phonebook/Loader/Loader';\r\nimport { getAuth } from 'redux/auth/authSlice';\r\nimport { loginUser } from 'redux/auth/authOperations';\r\n\r\nconst LoginForm = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n        \r\n    switch (name) {\r\n      case 'userEmail':\r\n        setEmail(value)\r\n        break;\r\n      case 'userPassword':\r\n        setPassword(value)\r\n        break;\r\n      default:\r\n        setEmail('')\r\n        setPassword('')\r\n    }\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const { isLoading } = useSelector(getAuth);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch(loginUser({ email: email, password: password }));\r\n  }\r\n\r\n  const emailId = useMemo(() => nanoid(), []);\r\n  const passwordId = useMemo(() => nanoid(), []);\r\n\r\n  return (<form onSubmit={handleSubmit}>\r\n        <label htmlFor={emailId}>Email</label>\r\n        <input\r\n            id={emailId}\r\n            type=\"email\"\r\n            name=\"userEmail\"\r\n            value={email}\r\n            onChange={handleChange}\r\n            required\r\n            placeholder='email'/>\r\n        <label htmlFor={passwordId}>Password</label>\r\n        <input\r\n            id={passwordId}\r\n            type=\"password\"\r\n            name=\"userPassword\"\r\n            value={password}\r\n            onChange={handleChange}\r\n            required\r\n            placeholder='password'/>\r\n        {!isLoading ? <button type='submit'>Log In</button> : <Loader />\r\n        }\r\n    </form>)\r\n};\r\n\r\nexport default LoginForm;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","email","setEmail","password","setPassword","handleChange","e","target","name","value","dispatch","useDispatch","isLoading","useSelector","getAuth","emailId","useMemo","nanoid","passwordId","onSubmit","preventDefault","loginUser","htmlFor","id","type","onChange","required","placeholder","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}